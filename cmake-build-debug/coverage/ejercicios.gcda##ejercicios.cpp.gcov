        -:    0:Source:/home/lakso/Documents/Facultad/Algo/tpi/ejercicios.cpp
        -:    0:Graph:/home/lakso/Documents/Facultad/Algo/tpi/cmake-build-debug/CMakeFiles/tpi.dir/ejercicios.gcno
        -:    0:Data:/home/lakso/Documents/Facultad/Algo/tpi/cmake-build-debug/CMakeFiles/tpi.dir/ejercicios.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Este archivo contiene las definiciones de las funciones que implementan los ejercicios
        -:    3://
        -:    4:
        -:    5:#include <stdio.h>
        -:    6:#include <iostream>
        -:    7:
        -:    8:
        -:    9:#include "definiciones.h"
        -:   10:#include "ejercicios.h"
        -:   11:#include "auxiliares.h"
        -:   12:
        -:   13:using namespace std;
        -:   14:
        -:   15:/******++++**************************** EJERCICIO minasAdyacentes ***********+++***********************/
        -:   16:// O(1) porque el loop siempre se ejecuta exáctamente 9 veces (constante)
function _Z15minasAdyacentesRSt6vectorIS_IbSaIbEESaIS1_EESt4pairIiiE called 120 returned 100% blocks executed 96%
      120:   17:int minasAdyacentes(tablero& t, pos p) {
      120:   18:    int adyacentes = 0;
      480:   19:    for (int i = -1; i <= 1; i++) {
      120:   19-block  0
      360:   19-block  1
      480:   19-block  2
branch  0 taken 360
branch  1 taken 120 (fallthrough)
     1440:   20:        for (int j = -1; j <= 1; j++) {
      360:   20-block  0
     1080:   20-block  1
     1440:   20-block  2
branch  0 taken 1080
branch  1 taken 360 (fallthrough)
     1080:   21:            if (i == 0 && j == 0) {
     1080:   21-block  0
branch  0 taken 360 (fallthrough)
branch  1 taken 720
      360:   21-block  1
branch  2 taken 120 (fallthrough)
branch  3 taken 240
      429:   22:                continue;
      120:   22-block  0
      429:   22-block  1
        -:   23:            }
      960:   24:            pos p2;
      960:   25:            p2.first = p.first + i;
      960:   26:            p2.second = p.second + j;
        -:   27:
      960:   28:            if (!esCoordenadaValida(t, p2)) {
      960:   28-block  0
call    0 returned 960
branch  1 taken 960 (fallthrough)
branch  2 taken 0 (throw)
      960:   28-block  1
branch  3 taken 309 (fallthrough)
branch  4 taken 651
      309:   29:                continue;
      309:   29-block  0
        -:   30:            }
      651:   31:            adyacentes += t[p2.first][p2.second] == cMINA ? 1 : 0;
      651:   31-block  0
call    0 returned 651
call    1 returned 651
branch  2 taken 651 (fallthrough)
branch  3 taken 0 (throw)
      651:   31-block  1
call    4 returned 651
branch  5 taken 51 (fallthrough)
branch  6 taken 600
       51:   31-block  2
      600:   31-block  3
      651:   31-block  4
    $$$$$:   31-block  5
        -:   32:        }
        -:   33:    }
      120:   34:    return adyacentes;
      120:   34-block  0
      120:   34-block  1
        -:   35:}
        -:   36:
        -:   37:/******++++**************************** EJERCICIO plantarBanderita ***********+++***********************/
        -:   38:// O(n) siendo n = |b| porque siempre recorre toda la lista b
function _Z16cambiarBanderitaRSt6vectorIS_IbSaIbEESaIS1_EERS_ISt4pairIS5_IiiEiESaIS7_EES6_RS_IS6_SaIS6_EE called 4 returned 100% blocks executed 100%
        4:   39:void cambiarBanderita(tablero& t, jugadas& j, pos p, banderitas& b) {
        9:   40:    for (int i = 0; i < b.size(); i++) {
        4:   40-block  0
        5:   40-block  1
        9:   40-block  2
call    0 returned 9
branch  1 taken 8
branch  2 taken 1 (fallthrough)
        8:   41:        if (b[i] == p) {
        8:   41-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 3 (fallthrough)
branch  3 taken 5
        3:   42:            pos holder = b[b.size()-1];
        3:   42-block  0
call    0 returned 3
call    1 returned 3
        3:   43:            b[b.size()-1] = b[i];
call    0 returned 3
call    1 returned 3
call    2 returned 3
call    3 returned 3
        3:   44:            b[i] = holder;
call    0 returned 3
call    1 returned 3
        -:   45:
        3:   46:            b.pop_back();
call    0 returned 3
        3:   47:            return;
        -:   48:        }
        -:   49:    }
        -:   50:
        -:   51:    // Si p no está en b
        1:   52:    b.push_back(p);
        1:   52-block  0
call    0 returned 1
        -:   53:}
        -:   54:
        -:   55:/******++++**************************** EJERCICIO perdio ***********+++***********************/
        -:   56:// O(n) siendo n = |j| porque si no perdió (el peor de los casos) recorre toda la lista sin encontrar una mina
function _Z6perdioRSt6vectorIS_IbSaIbEESaIS1_EERS_ISt4pairIS5_IiiEiESaIS7_EE called 2 returned 100% blocks executed 93%
        2:   57:bool perdio(tablero& t, jugadas& j) {
        4:   58:    for (int i = 0; i < j.size(); i++) {
        2:   58-block  0
        2:   58-block  1
        4:   58-block  2
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:   59:        pos p = j[i].first;
        3:   59-block  0
call    0 returned 3
        -:   60:
        3:   61:        if (t[p.first][p.second] == cMINA) {
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   61-block  0
call    4 returned 3
branch  5 taken 1 (fallthrough)
branch  6 taken 2
    $$$$$:   61-block  1
        1:   62:            return true;
        1:   62-block  0
        -:   63:        }
        -:   64:    }
        1:   65:    return false;
        1:   65-block  0
        -:   66:}
        -:   67:
        -:   68:/******++++**************************** EJERCICIO gano ***********+++***********************/
        -:   69:// O(n*m) siendo n = #posiciones en el tablero y m= |j| porque en el peor de los casos,
        -:   70:// por cada posición del tablero recorrió todas las jugadas sin encontrar una mina.
function _Z4ganoRSt6vectorIS_IbSaIbEESaIS1_EERS_ISt4pairIS5_IiiEiESaIS7_EE called 2 returned 100% blocks executed 95%
        2:   71:bool gano(tablero& t, jugadas& j) {
        7:   72:    for (int x = 0; x < t.size(); x++) {
        2:   72-block  0
        5:   72-block  1
        7:   72-block  2
call    0 returned 7
branch  1 taken 6
branch  2 taken 1 (fallthrough)
       34:   73:        for (int y = 0; y < t[x].size(); y++) {
        6:   73-block  0
       28:   73-block  1
       34:   73-block  2
call    0 returned 34
call    1 returned 34
branch  2 taken 29
branch  3 taken 5 (fallthrough)
       29:   74:            pos p;
       29:   75:            p.first = x;
       29:   76:            p.second = y;
       29:   77:            bool fueJugado = posEnJugadas(j, p); // O(m)
       29:   77-block  0
call    0 returned 29
branch  1 taken 29 (fallthrough)
branch  2 taken 0 (throw)
       29:   78:            bool esMina = t[x][y] == cMINA;
       29:   78-block  0
call    0 returned 29
call    1 returned 29
branch  2 taken 29 (fallthrough)
branch  3 taken 0 (throw)
       29:   78-block  1
call    4 returned 29
    $$$$$:   78-block  2
        -:   79:
       29:   80:            if ((esMina && fueJugado) || (!esMina && !fueJugado)) {
branch  0 taken 8 (fallthrough)
branch  1 taken 21
        8:   80-block  0
branch  2 taken 8 (fallthrough)
branch  3 taken 0
       29:   80-block  1
branch  4 taken 21 (fallthrough)
branch  5 taken 8
       21:   80-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 20
        1:   81:                return false;
        1:   81-block  0
        -:   82:            }
        -:   83:        }
        -:   84:    }
        1:   85:    return true;
        1:   85-block  0
        -:   86:}
        -:   87:
        -:   88:/******++++**************************** EJERCICIO jugarPlus ***********+++***********************/
        -:   89:// Función recursiva, una pasada es O(n + m) siendo n = |j| y m = |b|
        -:   90:// Como máximo, la función se va a ejecutar una vez por cada posición en el tablero
function _Z9jugarPlusRSt6vectorIS_IbSaIbEESaIS1_EERS_ISt4pairIiiESaIS6_EES6_RS_IS5_IS6_iESaISA_EE called 48 returned 100% blocks executed 92%
       48:   91:void jugarPlus(tablero& t, banderitas& b, pos p, jugadas& j) {
       48:   92:    jugada nuevaJugada = {p, minasAdyacentes(t,p)};
       48:   92-block  0
call    0 returned 48
branch  1 taken 48 (fallthrough)
branch  2 taken 0 (throw)
       48:   92-block  1
call    3 returned 48
    $$$$$:   92-block  2
       48:   93:    j.push_back(nuevaJugada);
call    0 returned 48
branch  1 taken 48 (fallthrough)
branch  2 taken 0 (throw)
       48:   94:    if (minasAdyacentes(t, p) > 0 || t[p.first][p.second] == cMINA) { // O(1)
       48:   94-block  0
call    0 returned 48
branch  1 taken 48 (fallthrough)
branch  2 taken 0 (throw)
       48:   94-block  1
branch  3 taken 48 (fallthrough)
branch  4 taken 0
       48:   94-block  2
call    5 returned 48
call    6 returned 48
branch  7 taken 48 (fallthrough)
branch  8 taken 0 (throw)
       48:   94-block  3
call    9 returned 48
branch 10 taken 1 (fallthrough)
branch 11 taken 47
        1:   94-block  4
       47:   94-block  5
       48:   94-block  6
branch 12 taken 1 (fallthrough)
branch 13 taken 47
    $$$$$:   94-block  7
        1:   95:        return;
        1:   95-block  0
        -:   96:    }
      188:   97:    for (int x = -1; x <= 1; x++) {
       47:   97-block  0
      141:   97-block  1
      188:   97-block  2
branch  0 taken 141
branch  1 taken 47 (fallthrough)
      564:   98:        for (int y = -1; y <= 1; y++) {
      141:   98-block  0
      423:   98-block  1
      564:   98-block  2
branch  0 taken 423
branch  1 taken 141 (fallthrough)
      423:   99:            pos posAdyacente = {p.first + x, p.second + y};
      423:   99-block  0
call    0 returned 423
      423:  100:            if (!esCoordenadaValida(t, posAdyacente) || posEnJugadas(j, posAdyacente)) { // O(n)
call    0 returned 423
branch  1 taken 423 (fallthrough)
branch  2 taken 0 (throw)
      423:  100-block  0
branch  3 taken 291 (fallthrough)
branch  4 taken 132
      291:  100-block  1
call    5 returned 291
branch  6 taken 291 (fallthrough)
branch  7 taken 0 (throw)
      291:  100-block  2
branch  8 taken 247 (fallthrough)
branch  9 taken 44
      379:  100-block  3
       44:  100-block  4
      423:  100-block  5
branch 10 taken 379 (fallthrough)
branch 11 taken 44
      379:  101:                continue;
      379:  101-block  0
        -:  102:            }
        -:  103:
       44:  104:            if (posEnBanderitas(b, posAdyacente)) {  // O(m)
       44:  104-block  0
call    0 returned 44
branch  1 taken 44 (fallthrough)
branch  2 taken 0 (throw)
       44:  104-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 43
        1:  105:                cambiarBanderita(t, j ,posAdyacente, b); // O(m)
        1:  105-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  106:            }
        -:  107:
       44:  108:            jugarPlus(t, b, posAdyacente, j);
       44:  108-block  0
call    0 returned 44
branch  1 taken 44 (fallthrough)
branch  2 taken 0 (throw)
        -:  109:        }
        -:  110:    }
        -:  111:}
        -:  112:
        -:  113:/******++++**************************** EJERCICIO sugerirAutomatico121 ***********+++***********************/
        -:  114:// O(n*m) siendo m = |j| y n = |t| + |b| + |j|
        -:  115:// Porque por cada jugada, se ejecutan funciones lineales sobre t b y j
function _Z20sugerirAutomatico121RSt6vectorIS_IbSaIbEESaIS1_EERS_ISt4pairIiiESaIS6_EERS_IS5_IS6_iESaISA_EERS6_ called 7 returned 100% blocks executed 98%
        7:  116:bool sugerirAutomatico121(tablero& t, banderitas& b, jugadas& j, pos& p) {
       18:  117:    for (int i = 0; i < j.size(); i++) { // Se ejecuta m veces
        7:  117-block  0
       11:  117-block  1
       18:  117-block  2
call    0 returned 18
branch  1 taken 15
branch  2 taken 3 (fallthrough)
       15:  118:        if (es121Horizontal(j, j[i])) { // O(m)
       15:  118-block  0
call    0 returned 15
call    1 returned 15
branch  2 taken 3 (fallthrough)
branch  3 taken 12
        3:  119:            pos posJugada = j[i].first;
        3:  119-block  0
call    0 returned 3
        3:  120:            pos arriba = {posJugada.first, posJugada.second-1};
call    0 returned 3
        3:  121:            pos abajo = {posJugada.first, posJugada.second+1};
call    0 returned 3
        3:  122:            if (puedeJugarse(t, b, j, arriba)) { // O(n)
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  122-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 2
        1:  123:                p = arriba;
        1:  123-block  0
call    0 returned 1
        2:  124:                return true;
        2:  124-block  0
        -:  125:            }
        2:  126:            if (puedeJugarse(t, b, j, abajo)) { // O(n)
        2:  126-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  126-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1:  127:                p = abajo;
        1:  127-block  0
call    0 returned 1
        1:  128:                return true;
        -:  129:            }
        -:  130:        }
       13:  131:        if (es121Vertical(j, j[i])) { // O(m)
       13:  131-block  0
call    0 returned 13
call    1 returned 13
branch  2 taken 3 (fallthrough)
branch  3 taken 10
        3:  132:            pos posJugada = j[i].first;
        3:  132-block  0
call    0 returned 3
        3:  133:            pos izquierda = {posJugada.first-1, posJugada.second};
call    0 returned 3
        3:  134:            pos derecha = {posJugada.first+1, posJugada.second};
call    0 returned 3
        3:  135:            if (puedeJugarse(t, b, j, derecha)) { // O(n)
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  135-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 2
        1:  136:                p = derecha;
        1:  136-block  0
call    0 returned 1
        2:  137:                return true;
        2:  137-block  0
        -:  138:            }
        2:  139:            if (puedeJugarse(t, b, j, izquierda)) { // O(n)
        2:  139-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  139-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1:  140:                p = izquierda;
        1:  140-block  0
call    0 returned 1
        1:  141:                return true;
        -:  142:            }
        -:  143:        }
        -:  144:    }
        3:  145:    return false;
        3:  145-block  0
        -:  146:}
